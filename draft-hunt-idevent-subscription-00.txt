



Network Working Group                                       P. Hunt, Ed.
Internet-Draft                                                    Oracle
Intended status: Standards Track                               M. Ansari
Expires: September 26, 2016                                        Cisco
                                                          March 25, 2016


                  Identity Event Subscription Protocol
                   draft-hunt-idevent-subscription-00

Abstract

   This specification defines an event feed service to manage and
   distribute events to registered subscribers.  The feed service
   defines:

   o  How subscribers may query the Feed Provider for available feeds.

   o  How a subscriber registers for a feed using a specified delivery
      method.

   o  How the feed subscription is confirmed.

   o  The methods by which events may be delivered such as through a
      registered web callback using HTTP POST, polling using HTTP GET,
      or via a push notification service such as WebPUSH
      [I-D.ietf-webpush-protocol] . And,

   o  Event handling, scalability, and security issues.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 26, 2016.





Hunt & Ansari          Expires September 26, 2016               [Page 1]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction and Overview . . . . . . . . . . . . . . . . . .   3
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   4
     1.2.  Definitions . . . . . . . . . . . . . . . . . . . . . . .   5
   2.  Event Notification Process  . . . . . . . . . . . . . . . . .   5
   3.  Discovery . . . . . . . . . . . . . . . . . . . . . . . . . .   7
     3.1.  Using Event Publisher Resource Link Headers . . . . . . .   7
     3.2.  Using the Feed Provider . . . . . . . . . . . . . . . . .   7
   4.  Publisher Services  . . . . . . . . . . . . . . . . . . . . .   7
     4.1.  Feed Management . . . . . . . . . . . . . . . . . . . . .   8
       4.1.1.  Feed Types  . . . . . . . . . . . . . . . . . . . . .   8
       4.1.2.  Feed Resource Schema  . . . . . . . . . . . . . . . .   9
       4.1.3.  Feed ResourceType . . . . . . . . . . . . . . . . . .  10
       4.1.4.  Retrieving Available Feeds  . . . . . . . . . . . . .  10
       4.1.5.  Feed Update Operations  . . . . . . . . . . . . . . .  11
     4.2.  Subscription Management . . . . . . . . . . . . . . . . .  12
       4.2.1.  Subscription Schema . . . . . . . . . . . . . . . . .  12
       4.2.2.  Subscription ResourceType . . . . . . . . . . . . . .  13
       4.2.3.  Create Subscription . . . . . . . . . . . . . . . . .  14
       4.2.4.  Subscription Verification . . . . . . . . . . . . . .  15
       4.2.5.  Cancel A Subscription . . . . . . . . . . . . . . . .  18
     4.3.  Publisher Services  . . . . . . . . . . . . . . . . . . .  18
       4.3.1.  Feed Registration . . . . . . . . . . . . . . . . . .  18
       4.3.2.  Feed Definition Operations  . . . . . . . . . . . . .  21
       4.3.3.  Event POSTing . . . . . . . . . . . . . . . . . . . .  22
       4.3.4.  Polling for Publisher Events  . . . . . . . . . . . .  23
     4.4.  Event Delivery  . . . . . . . . . . . . . . . . . . . . .  24
       4.4.1.  Web Callback  . . . . . . . . . . . . . . . . . . . .  24
       4.4.2.  Polling . . . . . . . . . . . . . . . . . . . . . . .  24
       4.4.3.  Push Notification Extensions  . . . . . . . . . . . .  24
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  24
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  24



Hunt & Ansari          Expires September 26, 2016               [Page 2]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


     6.1.  SCIM Event Notification Mechanism Registry  . . . . . . .  24
     6.2.  SCIM Event Type Registry  . . . . . . . . . . . . . . . .  24
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  24
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  24
     7.2.  Informative References  . . . . . . . . . . . . . . . . .  25
   Appendix A.  Contributors . . . . . . . . . . . . . . . . . . . .  26
   Appendix B.  Acknowledgments  . . . . . . . . . . . . . . . . . .  26
   Appendix C.  Change Log . . . . . . . . . . . . . . . . . . . . .  26
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  26

1.  Introduction and Overview

   Many service providers have a requirement to co-ordinate state of
   entities and services between each other.  Each service provider
   often tracks different information about entities and thus positive
   update commands such as HTTP POST or PATCH may not be possible as
   this would introduce complex error and signal requirements.  In
   contrast, when one service provider notifies another of an event, the
   subscriber is free to take local action as it has access to the
   relevant local state information.

   This specification defines a set of capabilities that can be used by
   publishers to distribute identity event tokens (see [idevent-token])
   to subscribers as well as an HTTP based approach for registering and
   managing subscriptions.

   While this specification defines a method of using HTTP POST or GET
   to deliver events, there are many protocols to perform this function.
   Accordingly, this specification defines a registry for profiling
   existing messaging protocols that may be used for event delivery by a
   particular subscriber.




















Hunt & Ansari          Expires September 26, 2016               [Page 3]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   The following diagram shows a typical Identity Feed Provider and its
   event notification Subscribers:

           +------------+                        +-------------+
           |            |Feeds Catalog           |             |
           |            +------------------------>             |
           |  Identity  |                        |  Identity   |
           |    Feed    |Subscription Request    |    Feed     |
           |  Provider  <------------------------+  Subscriber |
           |            |Subscription Confirm    |             |
           |            +------------------------>             |
           |            |                        |             |
           |            |                        |             |
           |            +------------------------>             |
           |            |Event Delivery          |             |
           |            |                        |             |
           +------------+                        +-------------+

                     Figure 1: Subscription Management

   An Identity Feed Provider may be directly integrated into a source
   service that generates events, or it may be a separate service entity
   that off-loads event distribution from the event generator to act as
   its publisher.  For the purposes of this specification, while event
   distribution may be handled separately, this specification will
   consider the definition of those exchanges out of scope.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119] . These
   keywords are capitalized when used to unambiguously specify
   requirements of the protocol or application features and behavior
   that affect the inter-operability and security of implementations.
   When these words are not capitalized, they are meant in their
   natural-language sense.

   For purposes of readability examples are not URL encoded.
   Implementers MUST percent encode URLs as described in Section 2.1 of
   [RFC3986] .

   Throughout this documents all figures MAY contain spaces and extra
   line-wrapping for readability and space limitations.  Similarly, some
   URI's contained within examples, have been shortened for space and
   readability reasons.





Hunt & Ansari          Expires September 26, 2016               [Page 4]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


1.2.  Definitions

   The following definitions are specific to Identity Event publishing:

   Feed Provider  The Feed Provider publishes events to be distributed
      to registered subscribers.

   Event  An event is an identify event [[id-event ref TBD]] that is to
      be distributed to one or more registered subscribers.  An event is
      encapsulated as a JWT token and MAY be signed or encrypted using
      JWS/JWE for authentication and confidentiality reasons.

   Feed  A feed is a URI that describes the set of resources and events
      under which events may be issued.  An interested client registers
      with the Feed Provider to subscribe to events associated with a
      feed.

   Notification Mechanism  A URI that describes the chosen event
      notification mechanism.  When subscribing to a feed, a client may
      choose a specific mechanism by which it wishes to receive
      notification events.  Examples of possible delivery mechanisms
      include:

         Registered Callback - The Feed Provider will deliver events by
         using HTTP POST to a registered endpoint.

         Polling - The subscriber will periodically poll the Feed
         Provider for one or more events by performing an HTTP GET to a
         specified URI (mailbox endpoint).

         Platform/Mobile Notification Services (e.g.  Apple Push
         Notification Service, Google Cloud Messaging, and Windows
         Notification Services).  Future profiles that support delivery
         of SCIM events vis platform specific messaging services.

   Subscriber  A Subscriber registers to receive event notifications
      from a Feed Provider.

2.  Event Notification Process

   When an event occurs, the Feed Provider constructs a JWT based
   Identity Event token [idevent-token] that describes the event.  The
   Feed Provider determines the feeds that the event should be published
   to, and determines which subscribers are effected.  The process by
   which events are categorized and selected for subscribers is out of
   scope of this specification.





Hunt & Ansari          Expires September 26, 2016               [Page 5]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   When an event is available for a subscriber, the Feed Provider
   attempts to deliver the event based on the subscribers registered
   delivery mechanism.  For example,

   o  The subscriber provided a web-callback endpoint, the publisher
      uses an HTTP/1.1 POST to the endpoint to deliver the event to the
      registered subscriber;

   o  For subscribers electing to poll for events, the feed publisher
      retains the events for a period of time or until the registered
      subscriber retrieves all pending events via HTTP/1.1 GET to the
      subscriber's assigned retrieval endpoint by the feed publisher;
      or,

   o  The subscriber elected to use an alternate delivery method (e.g.
      WebPUSH, Apple APNS, Google GMS), delivery is facilitated via the
      registered delivery profile for that method.

   After an event is delivered to all subscribers, Feed Providers will
   not typically maintain event records or histories.  As such,
   published events SHOULD be self-validating (e.g. signed).

   If delivery to any particular subscriber has been delayed for an
   extended period of time, the Feed Provider MAY suspend the
   subscription and even stop maintaining outstanding events for the
   subscriber at its discretion and available resources.  See
   subscription "state" in Section 4.2.1.

   Upon receiving an event token (or tokens in the case of multiple
   events), the subscriber reads the token and validates it.  Based on
   the content of the token, the subscriber decides what if any action
   it needs to take in response to the event.  For example, in response
   to a SCIM event [idevent-scim] indicating a changed resource, the
   subscriber might perform a SCIM GET request (see Section 3.4
   [RFC7644] ) to the affected resource URI in order to confidentially
   obtain the current state of the affected resource.  The receiver of
   the event then determines what action, if any, needs to be taken
   within the subscriber's domain.

   The action a receiver takes may be substantially different than
   merely copying the action of the publisher.  A single publisher event
   MAY trigger multiple receiver actions.  For example, upon receiving
   notification that a user resource has been added to a group, the
   receiver may first determine that the user does not exist in the
   subscriber's domain.  The receiver translates the event into two
   actions.  Retrieve the user (e.g. using SCIM GET) and then provisions
   the user locally.  After enabling the user, the receiver then enables




Hunt & Ansari          Expires September 26, 2016               [Page 6]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   the user for the application associated with membership in the
   publisher's group.

3.  Discovery

3.1.  Using Event Publisher Resource Link Headers

   A service provider that publishes events MAY optionally provide
   resource link headers per [RFC5988] for the purpose of feed and
   endpoint discovery.  When querying a service provider, the following
   resource link headers are defined:

   rel=event  The URI provided is the base URI for a feed pbulisher and
      its associated HTTP services.

   rel=oauth  The URI provides is for an OAuth authorization endpoint
      that will authorize access to a Feed Provider service.  When
      requesting authorization, clients should request an OAuth scope of
      "eventFeed".  This allows the client to register and request
      access to specific feeds.  [TBD is this needed?]

   rel=idfeed  The URI provided is for an identity feed for a resource
      (e.g. a SCIM resource).  The feed URI might be specific to the
      current resource, or for a larger set of resources (e.g. /Users).
      There may be more than one feed for any particular resource or set
      of resources.

3.2.  Using the Feed Provider

   A Feed Provider may advertise available feeds by listing them at its
   "/Feeds" endpoint (see Section 4.1 ).

4.  Publisher Services

   A "Feed" is a series of events made available by a publisher that a
   client (known as the "subscriber") MAY subscribe to.  If offered,
   subscribers MAY discover available feeds using the "Feeds" endpoint
   (see Section 4.1).

   A "Subscription" contains the information about a particular client
   and their subscription to a particular "feedUri" . It describes the
   client that has subscribed, the current delivery status indicating
   whether all events are delivered, pending, or whether delivery has
   failed.  The subscription also describes the method of event delivery
   and any associated configuration information (see Section 4.2 ).

   A Feed Provider may be deployed as a separate but trusted server (in
   the same security domain) in relation to an identity service or it



Hunt & Ansari          Expires September 26, 2016               [Page 7]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   may be fully integrated.  The Feed Provider's service follows the
   SCIM Protocol [RFC7644] specification unless otherwise indicated.

4.1.  Feed Management

4.1.1.  Feed Types

   A Feed Provider MAY define feeds based on a number of criteria.  This
   specification does not specify or limit the basis for which a service
   provider defines a feed or how feed URIs should be specified.  Some
   possible methods for defining feeds include:

   By Resource  Each resource might have its own event notification
      feed.  For example, a User's mobile application may require
      notification of changes or rights defined in a SCIM User resource
      associated with the mobile user.

   By Endpoint  A feed might be defined by an endpoint where any event
      relating to a resource within an endpoint is transmitted to
      subscriber.  This type of feed is likely to have many
      notifications as the number of resources in an endpoint grows
      (e.g.  a SCIM "/Users").  Typically only privileged partners would
      be allowed to use this type of feed.  For example an enterprise
      wishes to be notified of all events to any of its Users assuming
      all Users within the endpoint are related to the subscribing
      enterprise.

   By Filter  A feed might define a collection of resources based on a
      filter that describes a set of matching criteria a resource may be
      included in a feed.  Note that this type of feed may require extra
      processing by the service provider to determine if any particular
      resource event matches the filter criteria.  It may also be
      difficult for the service provider to notify subscribers of Feed
      additions and deletions as these will occur dynamically based on
      the filter.

   By Group  For example, all resources within a SCIM Group could be
      used to define the resources within a particular feed.  [TODO
      define a FEED Group extensions that define the attributes and
      events included within a particular Feed Group]

   How feeds are defined or implemented is out of the scope of this
   specification.  The above are examples about how feeds might be
   defined.







Hunt & Ansari          Expires September 26, 2016               [Page 8]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


4.1.2.  Feed Resource Schema

   The Feed Provider MAY provide an endpoint (e.g.  "/Feeds" ) where all
   feeds available to a subscriber may be listed.  If the feed endpoint
   is not offered, it is assumed that subscribers are informed of the
   available "feedUri" values (defined below) through an external
   administrative process.

   A Feed has a schema of "urn:ietf:params:scim:schemas:event:2.0:Feed"
   and has the following schema definition:

   A feed description consists of the following singular attributes:

   feedName
      A required string value containing a name for the feed.  May be
      used in administrative user interfaces to assist subscribers in
      feed selection.  The value MUST be unique within a given
      administrative domain.  This is a required attribute.

   feedUri
      An attribute of type "String" that is a unique URI identifying the
      feed.  This attribute characteristic "mutability" is "immutable"
      and SHALL NOT change once assigned.  This is a required attribute.

   description
      A "String" attribute that describes the purpose of the feed in
      human readable form.  This is an optional attribute.

   type
      A "Reference" attribute that is one of the following canonical
      values:

      resource  Indicates that the feed is for events related to a
         specific resource.  In such cases, the value of the attribute
         "filter" is set to a specific resource URI or "/Me" .

      endpoint  Indicates that the feed is for all events that occur for
         resources within a specific endpoint.  In such cases, "filter"
         is set to an endpoint container for a group of resources (e.g.
         "/Users" ).

      filter  Indicates that events for a feed will be selected based on
         events relating to the set of resources described by a filter.
         The value of the attribute "filter" is a SCIM filter that
         describes a condition that selects a set of resources that
         match before or after a resource state change.





Hunt & Ansari          Expires September 26, 2016               [Page 9]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


      group  Indicates that events for a feed will be based on events
         relating to the set of resources listed in a SCIM Group.  The
         value of the attribute "filter" is a URI that corresponds to a
         SCIM Group containing a set of members to be monitored.

         hangText="publisher">Indicates a group whose definition is
         specific to the service provider publisher.The value of the
         attribute "filter" if used, is defined by the service
         provider.[[SHOULD THERE BE AN EXTENSION POINT?]]

   filter
      A String value containing a SCIM filter (see Section 3.4.2.2
      [RFC7644] ), a resource, or a SCIM endpoint URI.  The contents of
      the value is indicated by the feed "type" attribute.

   The following multi-valued attributes are defined:

   events  One or more String values that contain the Event URIs
      supported[[TBD]].  By default, all available events MAY be
      published.

   deliveryModes  One or more URIs representing the methods of delivery
      supported by the feed.  By default, all delivery modes are
      supported.

4.1.3.  Feed ResourceType

   The "ResourceType" definition for a Feed is defined as follows:

    {
      "schemas": ["urn:ietf:params:scim:schemas:core:2.0:ResourceType"],
      "id": "Feed",
      "name": "Feed",
      "endpoint": "/Feeds",
      "description": "Event Feeds",
      "schema": "urn:ietf:params:scim:schemas:event:2.0:Feed",
      "schemaExtensions": []
    }

4.1.4.  Retrieving Available Feeds

   The feeds available to a particular client MAY be discovered by
   querying the "/Feeds" endpoint using the SCIM GET command (see
   Section 3.4 of [RFC7644]).







Hunt & Ansari          Expires September 26, 2016              [Page 10]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   The example below retrieves a specific Feed resource whose "id"id is
   "548b7c3f77c8bab33a4fef40".

   GET /Feeds/88bc00de776d49d5b535ede882d98f74
   Host: example.com
   Accept: application/scim+json
   Authorization: Bearer h480djs93hd8

                    Figure 2: Example Feed GET Request

   The response below shows an example Feed resource that describes an
   available feed.

   HTTP/1.1 201 Created
   Content-Type: application/scim+json
   Location:
    https://example.com/v2/Feeds/88bc00de776d49d5b535ede882d98f74
   ETag: 9d1c124149f522472e7a511c85b3a31b

   {
     "schemas":["urn:ietf:params:scim:schemas:event:2.0:Feed"],
     "id":"88bc00de776d49d5b535ede882d98f74",
     "feedName":"bjensenFeed",
     "feedUri":"https://example.com/events/bjensen",
     "description":"Feed for changes related to bjensen",
     "type":"resource",
     "filter":"https://example.com/v2/Users/453a-919d-413861904646",
     "events":[
       "to","be","defined!"
     ]
     "meta":{
        ...
     }
   }

                    Figure 3: Example Feed GET Response

4.1.5.  Feed Update Operations

   A Feed Provider MAY optionally choose to support some or all SCIM
   update operations (PUT, POST, PATCH, DELETE).  However it is not
   expected that most Subscribers will need access to these operations
   [[DISCUSS]].








Hunt & Ansari          Expires September 26, 2016              [Page 11]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


4.2.  Subscription Management

   Subscribers MAY manage their subscriptions using the Feed Provider's
   "/Subscriptions" endpoint.  Feed Provider services follow the same
   message format and protocol guidelines as per the SCIM Protocol
   specification (see [RFC7644]).  The subscriptions endpoint supports
   HTTP GET, POST, PUT, PATCH and DELETE to manage the full life cycle
   of a subscription.

4.2.1.  Subscription Schema

   The Feed Provider MAY provide an endpoint (e.g.  "/Subscriptions" )
   where the defined subscriptions may be listed.  Note that typically a
   particular subscriber SHOULD only be able to see subscriptions that
   are assigned to a particular subscriber subject entity.

   A "Subscription" has a schema of
   "urn:ietf:params:scim:schemas:event:2.0:Subscription" and has the
   following attributes:

   feedUri
      A string value containing the URI for a feed supported by the Feed
      Provider.  REQUIRED.

   mode
      A REQUIRED single-valued string which is a URI with one of the
      following values:

         "urn:ietf:params:scimnotify:api:messages:2.0:webCallback" - The
         Feed Provider will pass SCIM Events using HTTP POST to the
         callback URI specified in the attribute "subUri".

         "urn:ietf:params:scimnotify:api:messages:2.0:poll" - The
         subscriber will poll for SCIM Events using HTTP GET at the URI
         specified in the attribute "subUri"

   subUri
      When "mode" is set to
      "urn:ietf:params:scimnotify:api:messages:2.0:poll", "subUri"
      specifies the endpoint where the subscriber will retrieve pending
      events.  When set to
      "urn:ietf:params:scimnotify:api:messages:2.0:webCallback", it
      contains the URI where the Feed Provider will POST events.

   feedJwk
      AN OPTIONAL JSON Web Key (see [RFC7517]) that will be used to sign
      published events.  If present, the subscriber can authenticate
      events relayed from the Feed Provider.



Hunt & Ansari          Expires September 26, 2016              [Page 12]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   confidentialJwk
      The subscriber may provide a public JSON Web Key (see [RFC7517])
      that may be used by the Feed Provider to encrypt event messages
      for the subscriber.

   pollInterval
      The optional period in seconds between event polls when the
      subscriber plans to poll for events from the Feed Provider.  The
      interval is used by the hub to determine if a subscriber is
      offline or has otherwise failed over a number of intervals.  The
      hub MAY then change the state of the feed and/or perform some out-
      of-band administrative alert.

   state
      An optional value which indicates the current state of the feed
      which is:

         "on" - the default setting indicates the Feed Provider
         processing events and will pass them to the subscriber.

         "verify" - the subscription is pending verification.  While in
         "verify", published events SHALL NOT be stored or delivered to
         the subscriber.

         "paused" - indicates the Feed Provider is temporarily
         suspending delivery to subscriber.  While in "paused" events
         MAY be posted and will be delivered when state returns to "on".

         "off" - indicates that the subscription is no longer passing
         events.  While in off mode, the subscription is maintained, but
         new events are ignored and not processed.

         "fail" - Indicates that the Feed Provider was unable to deliver
         events to the subscriber for an extended period of time, or due
         to a call failure to the registered web call back URI.

4.2.2.  Subscription ResourceType

   The "ResourceType" definition for a Subscription is defined as
   follows:











Hunt & Ansari          Expires September 26, 2016              [Page 13]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


    {
      "schemas": ["urn:ietf:params:scim:schemas:core:2.0:ResourceType"],
      "id": "Subscription",
      "name": "Subscription",
      "endpoint": "/Subscriptions",
      "description": "Feed Subscription",
      "schema": "urn:ietf:params:scim:schemas:event:2.0:Subscription",
      "schemaExtensions": []
    }

4.2.3.  Create Subscription

   To request a subscription, a client performs a SCIM POST to the
   /Subscriptions endpoint with a HTTP Body consisting of a JSON object
   based on the attributes described in Section 4.2.1.  The request MUST
   include the "schemas" attribute with a value of:
   "urn:ietf:params:scim:schemas:notify:2.0:Subscription".

   The following is a non-normative example subscription creation
   request.

   POST /Subscriptions  HTTP/1.1
   Host: notify.example.com
   Accept: application/scim+json
   Content-Type: application/scim+json
   Authorization: Bearer h480djs93hd8
   Content-Length: ...

   {
     "schemas":
       ["urn:ietf:params:scim:schemas:notify:2.0:Subscription"],
     "feedUri":"https://example.com/v2/Feeds/548b7c3f77c8bab33a4fef40",
     "mode":"urn:ietf:params:scimnotify:api:messages:2.0:webCallback",
     "subUri":"https://subscriber.com/Events",
     "state":"verify",
     "feedJwk":{
         "kty":"EC",
         "crv":"P-256",
         "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
         "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
         "kid":"Public key for Example.com SCIM Publisher"
        }
   }

              Figure 4: Example Subscription Creation Request






Hunt & Ansari          Expires September 26, 2016              [Page 14]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   In response to a successful subscription creation request, the server
   responds with HTTP Status 200 and a representation of the completed
   subscription.  The following is a non-normative example response that
   has been formatted for display purposes:

   HTTP/1.1 201 Created
   Content-Type: application/scim+json
   Location:
    https://example.com/v2/Subscriptions/548b7c3f77c8bab33a4fef40

   {
     "schemas":
       ["urn:ietf:params:scim:schemas:notify:2.0:Subscription"],
     "feedUri":"https://example.com/v2/Feeds/548b7c3f77c8bab33a4fef40",
     "mode":"urn:ietf:params:scimnotify:api:messages:2.0:webCallback",
     "subUri":"https://subscriber.com/Events",
     "feedJwk":{
         "kty":"EC",
         "crv":"P-256",
         "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
         "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
         "kid":"Public key for Example.com SCIM Publisher"
        }
   }

   Upon receiving a successful subscription response, the subscribing
   client SHOULD check the subscription "state".  If set to "verify" ,
   the client needs to complete the subscription verification process in
   the following section.

4.2.4.  Subscription Verification

   In order to avoid ongoing communication issues and to minimize
   requirements for Feed Providers to maintain events indefinitely, a
   verification process is used to confirm that the requested event
   distribution endpoints are correct and that an event may be
   successfully delivered.

4.2.4.1.  Verifying 'Push' Style Subscriptions

   When using the WebCallback mode, or any other "push"-style
   communication scheme, the verification process also serves to verify
   that the identified endpoint consents to receiving events.  This
   prevents a notification server from flooding an endpoint which did
   not actually request an event subscription.

   To confirm a subscription, the Feed Provider SHALL POST (or otherwise
   send) an event to the endpoint identified by subUri or as specified



Hunt & Ansari          Expires September 26, 2016              [Page 15]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   by the registered push extension.  The event contains the following
   attributes:

   type  Set to the value of "CONFIRMATION"

   publisherUri  Set to the URI used to identify the Feed Provider.

   feedUris  MUST be set to a value that matches the subscription
      "feedUri" requested.

   confirmChallenge  A random String value that the subscriber SHALL
      echo back in its response.

   expires  A SCIM DateTime value that indicates the time the
      verification request will expire.  Once expired, the server will
      set the subscription state to "fail".

   If a confidential JWK was supplied, then the event SHOULD be
   encrypted with the provided key.  Successful parsing of the message
   confirms that both the endpoint is valid and the subscribers ability
   to parse the message.

   A non-normative JSON representation of an event to be sent to a
   subscriber as a subscription confirmation.  Note the event is not yet
   encoded as a JWT token.

   {
     "schemas":["urn:ietf:params:scim:schemas:notify:2.0:Event"],
     "publisherUri":"https://scim.example.com",
     "feedUris":[
      "https://notify.example.com/Feeds/98d52461fa5bbc879593b7754"

     ],
     "type":"CONFIRMATION",
     "confirmChallenge":"ca2179f4-8936-479a-a76d-5486e2baacd7",
     "expires":""

   }













Hunt & Ansari          Expires September 26, 2016              [Page 16]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   Upon receiving a subscription confirmation request, a confirming
   subscriber responds with a confirmation that includes the original
   "confirmChallenge" value.  If the request is received via HTTP/1.1
   POST, then the HTTP "response" is used.  A non-normative example of
   the response is:

   HTTP/1.1 200 OK
   Content-Type: application/scim+json

   {
     "schemas":["urn:ietf:params:scim:schemas:notify:2.0:Confirm"],
     "challengeResponse":"ca2179f4-8936-479a-a76d-5486e2baacd7"
     }
   }

   As per the above figure, upon receiving and parsing a confirmation
   event, the subscriber MUST respond by returning a JSON structure that
   includes the attribute "challengeResponse" with a matching value to
   "confirmChallenge" that was sent in the event.  The response is not
   formatted as an event token but rather a JSON object with schemas set
   to "urn:ietf:params:scim:schemas:notify:2.0:Confirm".  If the
   subscriber returns a non-matching value or an HTTP status other than
   a 200 series response, the subscription "state" SHALL be set to
   "fail".  A declining subscriber MAY simply respond with any 400
   series HTTP error (e.g. 404).

4.2.4.2.  Verifying 'Polling' Style Subscriptions

   For clients that use a subscription mode (e.g.
   "urn:ietf:params:scimnotify:api:messages:2.0:poll") that pick up
   events from a subscription endpoint, the client MAY confirm the
   subscription by simply reading the event using an HTTP GET at the
   endpoint specified by the attribute "subUri" in the subscription.
   Once the confirmation event has been retrieved, the service provider
   MAY mark the subscription as confirmed.

   A non-normative example of a client, having previously subscribed,
   picking up the initial subscription confirmation message.

   GET /Events/548b7c3f77c8bab33a4fef40/
   Host: example.com
   Accept: application/scim+json
   Authorization: Bearer h480djs93hd8
   Content-Length: ...







Hunt & Ansari          Expires September 26, 2016              [Page 17]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   To which the event provider responds with the available events which
   SHOULD include a confirmation event (non-normative example):

   {
     "schemas":["urn:ietf:params:scim:schemas:notify:2.0:Event"],
     "publisherUri":"https://scim.example.com",
     "feedUris":[
      "https://notify.example.com/Feeds/98d52461fa5bbc879593b7754"

     ],
     "type":"CONFIRMATION",
     "confirmChallenge":"ca2179f4-8936-479a-a76d-5486e2baacd7",
     "expires":""

   }

4.2.5.  Cancel A Subscription

   To cancel a subscription, the subscriber MAY perform a SCIM DELETE
   against the resource URI for the subscription.  In the event the
   subscriber wants to temporarily suspend the subscription, it may
   modify the "state" attribute to a value of "off".

4.3.  Publisher Services

   With the exception of the PATCH operation (which is not used), the
   endpoints within the Feed Provider follow the same message format and
   API guidelines as per the SCIM API specification (see [RFC7644]).
   Feed Registration supports HTTP GET, POST, PUT, and DELETE to manage
   the full life cycle of a Feed.

4.3.1.  Feed Registration

   To register a feed, a SCIM Service Provider makes a call to the
   Notify Hub's registration endpoint ("<Notification_base>/Feeds") by
   performing an HTTP POST containing a JSON structure based on the
   parameters defined in the following section.  In response, the server
   will return a feed location and an optional public key which the
   publisher may use to encrypt posted events to the Notification Hub.

   In the registration request, the "schemas" attribute MUST be included
   in the registration request and be set to:
   "urn:ietf:params:scim:schemas:notify:2.0:Feed".  The following is a
   non-normative example of a request to create a new SCIM Feed.  Note
   that additional spacing has been introduced for clarity.






Hunt & Ansari          Expires September 26, 2016              [Page 18]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   POST /Feeds  HTTP/1.1
   Host: notify.example.com
   Accept: application/scim+json
   Content-Type: application/scim+json
   Authorization: Bearer h480djs93hd8
   Content-Length: ...

   {
     "schemas":["urn:ietf:params:scim:schemas:notify:2.0:Feed"],
     "feedName":"bjensen",
     "feedDescription":"Feed for changes related to bjensen",
     "feedData":{
       "$ref":
         "https://example.com/v2/Users/453a-919d-413861904646"
     }
     "mode":"post",
     "publisherJwk":{
         "kty":"EC",
         "crv":"P-256",
         "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
         "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
         "kid":"Public key for Example.com SCIM Publisher"
        }
   }

                  Figure 5: Example Feed Creation Request

   In response to a successful registration request, the Feed Provider
   SHALL respond with the location of the created feed in the HTTP
   Location header, and the HTTP body SHALL contain a JSON structure
   with the accepted registration parameters and MAY include in its
   response, the following additional parameter:

   confidentialJwk
      In its response, the Feed Provider may provide a public JSON Web
      Key (see [RFC7517]) that may be used by the client to encrypt
      event messages for the Feed Provider.  The key might be the Feed
      Provider's general public key, or it may be generated per
      registered feed.  Accordingly, registering SCIM Service Providers
      should assume that each key returned MAY be specific to the
      corresponding registered feed.










Hunt & Ansari          Expires September 26, 2016              [Page 19]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   HTTP/1.1 201 Created
   Content-Type: application/scim+json
   Location:
    https://example.com/v2/Feeds/548b7c3f77c8bab33a4fef40
   ETag: 9d1c124149f522472e7a511c85b3a31b

   {
     "schemas":["urn:ietf:params:scim:schemas:notify:2.0:Feed"],
     "id":"548b7c3f77c8bab33a4fef40",
     "feedName":"bjensen",
     "feedDescription":"Feed for changes related to bjensen",
     "feedData":{
       "type":"resource",
       "$ref":
         "https://example.com/v2/Users/453a-919d-413861904646"
     }
     "mode":"post",
     "state":"on",
     "publisherJwk":{
         "kty":"EC",
         "crv":"P-256",
         "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
         "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
         "kid":"Public key for Example.com SCIM Publisher"
        }
     "confidentialJwk":{
        ...<feed public crypto key>...
     }
   }

                 Figure 6: Example Feed Creation Response

4.3.1.1.  Feed Request Parameters

   To create a feed, the following parameters are used by the SCIM
   Service Provider to register a feed:

   feedDescription
      An optional string value containing text that describes the
      content of the feed.  May be used in administrative user
      interfaces to assist subscribers in feed selection.

   feedPollUri
      When "mode" is set to "poll", "feedPollUri" specifies the endpoint
      where the Feed Provider will retrieve pending updates from the
      publishing SCIM Service Provider.

   publisherJwk



Hunt & Ansari          Expires September 26, 2016              [Page 20]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


      The publishers optional JSON Web Key (see [RFC7517]) that will be
      used to publish events.  By registering a key, the Feed Provider
      can authenticate events from SCIM Service Provider.

   pollInterval
      The optional period in seconds between event polls when the Feed
      Provider is set to poll for events from the SCIM Service Provider.

   state
      An optional value which indicates the current state of the feed
      which is:

         "on" - the default setting indicates the notification hub is
         receiving events and will forward them to current feed
         subscribers.  If no subscribers exist or all subscribers have
         been notified, the events are deleted.

         "pending" - indicates the Feed Provider is temporarily
         suspending delivery to subscribers.  While in "pending" events
         may be posted and will be held for delivery by the hub until
         state returns to "on" (when events are subsequently delivered)
         or "fail".

         "off" - indicates an administrator or publisher has requested
         the feed to stop delivery.  While in off mode, the subscribers
         are maintained, but new events shall be ignored.

         "fail" - usually used in connection with "polling" feeds.
         Indicates that the Feed Provider has been unable to retrieve
         events from the service provider for an extended period of
         time, or due to a call failure to the registered polling call
         back URI.  [TODO: discuss whether a hub should continue to
         queue events in failed mode]

4.3.2.  Feed Definition Operations

   As with any SCIM resource, a notification Feed MAY be:

   o  Queried by using a SCIM HTTP GET request.  In particular,
      subscribers may perform a GET to the "/Feeds" endpoint to discover
      available feeds.

   o  Updated by using a SCIM PUT request.

   o  Deleted using a SCIM DELETE request.  Upon receiving a delete
      request, all corresponding notification subscriptions SHALL also
      be deleted.  For this reason, instead of deletion, setting feed
      status to "off" is recommended.



Hunt & Ansari          Expires September 26, 2016              [Page 21]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


4.3.3.  Event POSTing

   To create an event, a SCIM Event Publisher, simply performs an HTTP
   POST "/Events" appended to the Feed location URI.  The body of the
   request includes a JSON object with the following attributes:

   schemas  A multi-valued string containing the value "

   A non-normative example is as follows:

   POST /Feeds/548b7c3f77c8bab33a4fef40/Events  HTTP/1.1
   Host: notify.example.com
   Accept: application/scim+json
   Content-Type: application/scim+json
   Content-Length: ...

   {
   "schemas":["urn:ietf:params:scim:schemas:notify:2.0:Feed"]
   "eventToken":
     "eyJhbGciOiJub25lIn0
     .
     eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
     kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
     FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
     WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
     WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
     hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
     VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
     SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
     b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
     tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
     1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
     ."
   }

   In response, if the event token is validated, the server SHALL
   indicate successful submission by responding with:

   HTTP/1.1 204 No Content

   Since the normal operation of the Feed Provider is to forward events
   to registered subscribers, the Feed Provider is not obligated to
   inform the publisher of a permanent event URI that was created.
   Servers MAY allow HTTP clients to check for undelivered events by
   performing a GET against the same endpoint as the Event submission
   endpoint described above.

   [TODO: Describe the error conditions and responses]



Hunt & Ansari          Expires September 26, 2016              [Page 22]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   A SCIM Event Publisher MAY publish an event of type "CONFIRMATION" to
   the provided publication endpoint to confirm successful
   configuration.  "CONFIRMATION" events SHALL NOT be passed on to
   subscribers.

4.3.4.  Polling for Publisher Events

   When a publisher registers a feed with a "mode" of "poll", the Feed
   Provider SHALL confirm configuration by performing an HTTP GET to the
   "feedPollUri" provided by the publisher during registration of the
   feed.  On the first GET, the notification server should receive an
   event of type "CONFIRMATION".  The confirmation event should contain
   an event with the "resourceUris" attribute set to a value that
   corresponds to the URI of the feed registration.

   In its response to the notification polling for events by performing
   an HTTP Get to the "feedPollUri", the server shall construct a JSON
   message, with a schemas attribute consisting of the value:
   "urn:ietf:params:scim:api:messages:2.0:EventList" and a multivalued
   attribute of "eventTokens" containing one or more event tokens.  The
   following non-normative example has been modified for brevity and
   readability:

   HTTP/1.1 200 OK
   Content-Type: application/scim+json
   Location: https://example.com/FeedPoll/548b7c3f77c8bab33a4fef40
   {
   "schemas":["urn:ietf:params:scim:api:messages:2.0:EventList"],
   "eventTokens":[
     "eyJhbGciOiJub25lIn0
     .
     eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
     kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
     FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
     WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
     WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
     hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
     VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
     SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
     b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
     tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
     1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
     ."]
   }







Hunt & Ansari          Expires September 26, 2016              [Page 23]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


4.4.  Event Delivery

   [TODO: Detail the event delivery extension point and define the
   following 3 methods]

4.4.1.  Web Callback

4.4.2.  Polling

4.4.3.  Push Notification Extensions

5.  Security Considerations

   The synchronizing of User passwords between administrative domains is
   to be handled with great care.  From a security perspective the re-
   use of passwords across service providers is to be highly
   discouraged.  However, in the enterprise user experience, if the
   perception of the user is that service providers from multiple
   domains are part of a single corporate application environment, then
   password synchronization MAY be appropriate as part of an overall
   identity management and governance mechanism.

   [TO BE COMPLETED]

6.  IANA Considerations

6.1.  SCIM Event Notification Mechanism Registry

   TODO: Registration for Notification Mechanisms

6.2.  SCIM Event Type Registry

   TODO: Registration of Event Types

7.  References

7.1.  Normative References

   [idevent-token]
              Oracle Corporation, "Identity Event Token (work in
              progress)".

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.





Hunt & Ansari          Expires September 26, 2016              [Page 24]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <http://www.rfc-editor.org/info/rfc3986>.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <http://www.rfc-editor.org/info/rfc5988>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <http://www.rfc-editor.org/info/rfc7519>.

   [RFC7643]  Hunt, P., Ed., Grizzle, K., Wahlstroem, E., and C.
              Mortimore, "System for Cross-domain Identity Management:
              Core Schema", RFC 7643, DOI 10.17487/RFC7643, September
              2015, <http://www.rfc-editor.org/info/rfc7643>.

   [RFC7644]  Hunt, P., Ed., Grizzle, K., Ansari, M., Wahlstroem, E.,
              and C. Mortimore, "System for Cross-domain Identity
              Management: Protocol", RFC 7644, DOI 10.17487/RFC7644,
              September 2015, <http://www.rfc-editor.org/info/rfc7644>.

7.2.  Informative References

   [I-D.ietf-webpush-protocol]
              Thomson, M., Damaggio, E., and B. Raymor, "Generic Event
              Delivery Using HTTP Push", draft-ietf-webpush-protocol-02
              (work in progress), November 2015.

   [idevent-scim]
              Oracle Corporation, "SCIM Event Extensions (work in
              progress)".

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <http://www.rfc-editor.org/info/rfc7515>.

   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
              RFC 7516, DOI 10.17487/RFC7516, May 2015,
              <http://www.rfc-editor.org/info/rfc7516>.

   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517,
              DOI 10.17487/RFC7517, May 2015,
              <http://www.rfc-editor.org/info/rfc7517>.






Hunt & Ansari          Expires September 26, 2016              [Page 25]

Internet-Draft       draft-hunt-idevent-subscription          March 2016


Appendix A.  Contributors

Appendix B.  Acknowledgments

   The editor would like to thank the participants in the the SCIM
   working group for their support of this specification.

Appendix C.  Change Log

   Draft 00 - PH - First Draft

Authors' Addresses

   Phil Hunt (editor)
   Oracle Corporation

   Email: phil.hunt@yahoo.com


   Morteza Ansari
   Cisco

   Email: morteza.ansari@cisco.com




























Hunt & Ansari          Expires September 26, 2016              [Page 26]
